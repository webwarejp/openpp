security:

    acl:
        connection: default 
    encoders:
        FOS\UserBundle\Model\UserInterface: sha512
        Symfony\Component\Security\Core\User\User: plaintext

    role_hierarchy:
        ROLE_ADMIN:       [ROLE_USER, ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH, SONATA]
        SONATA:
            - ROLE_SONATA_PAGE_ADMIN_PAGE_EDIT # if you are not using acl then this line must be uncommented
            - ROLE_SONATA_PAGE_ADMIN_BLOCK_EDIT

    providers:
        # in memory provider
        in_memory:
            memory:
                users:
                    user:  { password: "%in_memory.user.pass%",  roles: [ 'ROLE_USER' ] }
                    admin: { password: "%in_memory.admin.pass%", roles: [ 'ROLE_SUPER_ADMIN' ] }

        # FpOpenIdBundle
        #openid_user_provider:
        #    id: acme.user.openid_user_manager # the name of the service

        # FOSUserBundle
        #fos_userbundle:
        #    id: fos_user.user_manager
        fos_userbundle:
            id: fos_user.user_provider.username

        #front_provider:
        #    chain:
        #        providers: [ fos_user_provider, in_memory ]

        admin_provider:
            chain:
                providers: [ fos_userbundle, in_memory ]

    firewalls:
        admin:
            pattern:           /admin/(.*)
            context:        user
            form_login:
                provider:       admin_provider
                csrf_provider:  form.csrf_provider
                login_path:     sonata_user_admin_security_login
                check_path:     sonata_user_admin_security_check
                use_forward:    false
                always_use_default_target_path: false
                default_target_path:  sonata_admin_dashboard
                target_path_parameter:          _target_path
                failure_path:   null
                use_referer:    true
            logout:
                path:           sonata_user_admin_security_logout
                target:         sonata_user_admin_security_login
            anonymous:        true
            context:          application

        #
        # http://blog.logicexception.com/2012/04/securing-syfmony2-rest-service-wiith.html
        api:
            pattern:    ^/api
            fos_oauth:  true
            stateless:  true
            anonymous:  false # can be omitted as its default value
        oauth_authorize:
            pattern:    ^/oauth/v2/auth
            context:      primary_auth
            form_login:
                provider:     fos_userbundle
                check_path:   /oauth/v2/auth_login_check
                login_path:   /oauth/v2/auth_login
            anonymous: true

        oauth_token:
            pattern:    ^/oauth/v2/token
            security:   false
        ###



        # フロント側
        main:
            pattern:      .*
            context:      primary_auth
            form_login:
                provider:       fos_userbundle
                login_path:     /login
                use_forward:    false
                check_path:     /login_check
                failure_path:   null
            logout:
                path: /logout
                # We set invalidate_session to false because we want basket
                # to be fully persisted even when user logout and login again
                invalidate_session: false
                handlers: ['sonata.page.cms_manager_selector']
            anonymous:    true

    access_control:
        # URL of FOSUserBundle which need to be available to anonymous users
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Admin login page needs to be access without credential
        - { path: ^/admin/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY }

#        - { path: ^/login_openid$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        #OAuth
        #- { path: ^/oauth/v2/auth_login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        #- { path: ^/oauth/v2/auth_login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # It also secures the shop checkout process
        # Change these rules to adapt them to your needs
        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN] }
        - { path: ^/api, roles: [ IS_AUTHENTICATED_FULLY ] }

parameters:
    in_memory.user.pass: passward
    in_memory.admin.pass: passward

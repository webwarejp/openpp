security:
    ## sonata
    acl:
        connection: default 
    encoders:
        FOS\UserBundle\Model\UserInterface: sha512
        Symfony\Component\Security\Core\User\User: plaintext

    role_hierarchy:
        ROLE_ADMIN:       [ROLE_USER, ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
#        SONATA:
#            - ROLE_SONATA_PAGE_ADMIN_PAGE_EDIT  # if you are using acl then this line must be commented

    providers:
        # in memory provider
        in_memory:
            memory:
                users:
                    user:  { password: "%in_memory.user.pass%",  roles: [ 'ROLE_USER' ] }
                    admin: { password: "%in_memory.admin.pass%", roles: [ 'ROLE_SUPER_ADMIN' ] }

        # FpOpenIdBundle
        #openid_user_provider:
        #    id: acme.user.openid_user_manager # the name of the service

        # FOSUserBundle
        fos_user_provider:
            id: fos_user.user_provider.username

        my_fos_facebook_provider:
            id: application.sonata.user.facebook.user

        front_provider:
            chain:
                providers: [ fos_user_provider, in_memory ]

        admin_provider:
            chain:
                providers: [ fos_user_provider, in_memory ]

    firewalls:
        admin:
            pattern:           /admin/(.*)
            form_login:
                provider:       admin_provider
                csrf_provider:  form.csrf_provider
                login_path:     sonata_user_admin_security_login
                check_path:     sonata_user_admin_security_check
                use_forward:    false
                always_use_default_target_path: false
                default_target_path:  sonata_admin_dashboard
                target_path_parameter:          _target_path
                failure_path:   null
                use_referer:    true
            logout:
                path:           sonata_user_admin_security_logout
                target:         sonata_user_admin_security_login
            anonymous:        true
            context:          application
        # フロント側
        main:
            pattern: .*
            form_login:
                provider:      front_provider
                csrf_provider: form.csrf_provider
#            #OpenID
#            fp_openid:
#                create_user_if_not_exists: true # so createUserFromIdentity method will be called
#                provider: openid_user_provider # cf below
#                # previously we used 'contact/email' field. So we have to request it!
#                # Please note that all OpenID providers may not be able to provide all fields.
#                # check the desired provider documentation
#                required_attributes:
#                    - contact/email 
            # FOSFacebookBundle
            fos_facebook:
                app_url: "http://apps.facebook.com/appName/"
                server_url: "http://openpp.localhost/facebookApp/"
                check_path: /login_check_facebook
                provider:   my_fos_facebook_provider
            logout:
                delete_cookies:
                    fbsr_1456604707887487: { path: "/", domain: null }
            anonymous:    true
            context:      application
            switch_user:  true

    access_control:
        - { path: ^/$, role: IS_AUTHENTICATED_ANONYMOUSLY } 
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login_openid$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN] }

parameters:
    in_memory.user.pass: passward
    in_memory.admin.pass: passward
